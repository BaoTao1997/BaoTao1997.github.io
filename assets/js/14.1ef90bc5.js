(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{211:function(t,s,a){t.exports=a.p+"assets/img/1.6e0f0d40.png"},236:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h2",{attrs:{id:"vue相关问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#vue相关问题","aria-hidden":"true"}},[t._v("#")]),t._v(" Vue相关问题")]),t._v(" "),n("h3",{attrs:{id:"_1-vue的双向绑定原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1-vue的双向绑定原理","aria-hidden":"true"}},[t._v("#")]),t._v(" 1.Vue的双向绑定原理")]),t._v(" "),n("p",[t._v("vue的双向绑定是由数据劫持结合发布者－订阅者模式实现的，通过Object.defineProperty()["),n("em",[t._v("对象，对象上的属性，描述符")]),t._v("]来劫持对象属性的setter和getter操作实现数据驱动视图。具体参考"),n("a",{attrs:{href:"https://baotao1997.github.io/blog/framework-mvvm.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("MVVM"),n("OutboundLink")],1)]),t._v(" "),n("ul",[n("li",[t._v("Vue如何实现监听数组的"),n("code",[t._v("push")]),t._v("，"),n("code",[t._v("pop")]),t._v("和"),n("code",[t._v("splice")]),t._v("方法？")])]),t._v(" "),n("p",[t._v("Object.defineProperty对数组进行响应式化是有缺陷的，虽然我们可以监听到索引的改变，但是defineProperty不能检测到数组长度的变化，准确的说是通过改变length而增加的长度不能监测到。")]),t._v(" "),n("p",[t._v("虽然我们无法使用Object.defineProperty将数组进行响应式的处理，也就是getter-setter，但是还有其他的功能可以供我们使用。就是数据描述符，数据描述符是一个具有值的属性，该值可能是可写的，也可能不是可写的。")]),t._v(" "),n("p",[n("strong",[t._v("value")])]),t._v(" "),n("p",[t._v("该属性对应的值。可以是任何有效的 JavaScript 值（数值，对象，函数等）。默认为 undefined。")]),t._v(" "),n("p",[n("strong",[t._v("writable")])]),t._v(" "),n("p",[t._v("当且仅当该属性的writable为true时，value才能被"),n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Assignment_Operators",target:"_blank",rel:"noopener noreferrer"}},[t._v("赋值运算符"),n("OutboundLink")],1),t._v("改变。默认为 false。")]),t._v(" "),n("p",[t._v("因此我们只要把原型上的方法，进行value的重新赋值。")]),t._v(" "),n("p",[t._v("如下代码，在重新赋值的过程中，我们可以获取到方法名和所有参数。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    writable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    enumerable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'key'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'args'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写的数组方法")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 数组方法的绑定")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'push'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nobj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制台输出 key push")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 控制台输出 args [Array(2), 7, "hello!"]')]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br")])]),n("p",[n("strong",[t._v("Vue监听Array")])]),t._v(" "),n("p",[t._v("第一步：先获取原生 Array 的原型方法，因为拦截后还是需要原生的方法帮我们实现数组的变化。")]),t._v(" "),n("p",[t._v("第二步：对 Array 的原型方法使用 Object.defineProperty 做一些拦截操作。")]),t._v(" "),n("p",[t._v("第三步：把需要被拦截的 Array 类型的数据原型指向改造后原型。")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayProto "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Array")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取Array的原型")]),t._v("\n \n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("value")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("args")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 控制台输出 push")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// 控制台输出 [Array(2), 7, "hello!"]')]),t._v("\n       \n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 获取原生的方法")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" original "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将开发者的参数传给原生的方法，保证数组按照开发者的想法被改变")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("original")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n \n      "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// do something 比如通知Vue视图进行更新")]),t._v("\n      console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'我的数据被改变了，视图该更新啦'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("text "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello Vue'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 新的原型")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" obj "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 重写赋值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("def")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'push'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" arr "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 原型的指向重写")]),t._v("\narr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 执行push")]),t._v("\narr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("push")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'hello!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br")])]),n("h3",{attrs:{id:"_2-vue组件通信"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2-vue组件通信","aria-hidden":"true"}},[t._v("#")]),t._v(" 2.Vue组件通信")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("对于多组件之间的状态共享"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("我们需要通过state规定统一的数据仓库"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n只能通过Action和Mutation实现数据的更改"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("然后实现多组件的数据同时改变\n总结"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("props父传子"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("$emit自定义事件子传父"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("都是")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vue命令"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("子组件内容 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" 父组件内容\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.")]),t._v("父组件向子组件传值\n父组件中的 v"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("'"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("子组件props中的属性名称")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("若子组件props中的名称为myName"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n由于"),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("HTML")]),t._v("特性不区分大小写"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("所以这里采用my"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'='")]),t._v("父组件中的属性名称'\n注意如果是静态字符串则可以不用v"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("否则必须使用\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2.")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("子组件向父组件传值")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("自定义事件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("回调函数"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("自定义事件"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("\n子组件通过事件"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$emit('")]),t._v("modify"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("', this.modifylist);'")]),t._v("传递消息给父组件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n再用v"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("on"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'子组件事件名称'")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'父组件事件名称'")]),t._v("\n简化写法即为"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v("`v-model`")])]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("主要用于表单的双向绑定"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("实际上是\n"),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`<input type="text" v-model="name">`')])]),t._v("\n相当于："),n("span",{pre:!0,attrs:{class:"token template-string"}},[n("span",{pre:!0,attrs:{class:"token string"}},[t._v('`<input type="text" :value="name" @input="name = $event.target.value">`')])]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("回调函数"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("--")]),t._v("\n通过"),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'v-bind:callback=\"callback\"'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("用props将回调函数传给子组件"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n然后在子组件中用v"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("on"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("click"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"callback"')]),t._v("绑定该方法\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("3.")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("兄弟组件传值")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("可以用一个父组件做中继"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("也可以用事件总线"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("介绍一下事件总线"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n新建一个bus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("js")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("事件总线EventBus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" Vue "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Vue'")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" eventbus "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Vue")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" eventbus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n并在兄弟组件中引入"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("然后"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n组件"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("用eventBus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1to2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'emmit'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n组件"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("则用eventBus"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("$on")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'1to2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("message")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("fromBrother "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" message"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" 保证事件名称相同\n"),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("4.")]),t._v("更深层次的注入provide"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("inject\n在组件中使用provide"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("provide")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    getMap"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getMap\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n其所有的子组件及后代可以通过inject来进行获取getMap方法"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\ninject"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'getMap'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br")])]),n("p",[t._v("Tips：Vue父子组件传值传引用类型的时候，修改父组件对象中的某个值，利用props则发现子组件使用相应属性时没有发生修改，具体操作方式有：")]),t._v(" "),n("ul",[n("li",[t._v("通过深拷贝拷贝传入子组件的对象，则能够实现监听")]),t._v(" "),n("li",[t._v("通过子组件中使用"),n("code",[t._v("watch")]),t._v("对修改的对象的某个属性进行监听")])]),t._v(" "),n("h3",{attrs:{id:"_3-vue的生命周期"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3-vue的生命周期","aria-hidden":"true"}},[t._v("#")]),t._v(" 3.Vue的生命周期")]),t._v(" "),n("p",[n("img",{attrs:{src:a(211),alt:"img"}})]),t._v(" "),n("p",[t._v("vue源码中最终执行生命周期函数都是调用"),n("code",[t._v("callHook")]),t._v("方法，"),n("code",[t._v("callHook")]),t._v("函数的逻辑很简单，根据传入的生命周期类型 "),n("code",[t._v("hook")]),t._v("，去拿到 "),n("code",[t._v("vm.$options[hook]")]),t._v("对应的回调函数数组，然后遍历执行，执行的时候把 "),n("code",[t._v("vm")]),t._v("作为函数执行的上下文。")]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("new Vue(options)")]),t._v("：创建一个vm实例；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("mergeOptions(resolveConstructorOptions(vm.constructor), options, vm)")]),t._v("：合并Vue构造函数里options和传入的options或合并父子的options。比如：在mergeOptions函数中会调用mergeHook方法合并生命周期的钩子函数，mergeHook方法原理是只有父时返回父，只有子时返回数组类型的子。"),n("strong",[t._v("父、子都存在时，将子添加在父的后面返回组合而成的数组。这也是父子均有钩子函数的时候，先执行父的后执行子的的原因；")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("initLifecycle(vm)、initEvents(vm)、initRender(vm)")]),t._v("：在创建的vm实例上初始化生命周期、事件、渲染相关的属性；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'beforeCreate')")]),t._v("：调用beforeCreate生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("initInjections(vm)、initState(vm)、initProvide(vm)")]),t._v("：初始化数据：inject、state、provide。initState 的作用是初始化 props、data、methods、watch、computed 等属性；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'created')")]),t._v("：调用created生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("vm.$mount(vm.$options.el)")]),t._v("："),n("code",[t._v("$mount")]),t._v('方法在多个文件中都有定义，如"src/platform/web/entry-runtime-with-compiler.js"、"src/platform/web/runtime/index.js"、"src/platform/weex/runtime/index.js"。因为'),n("code",[t._v("$mount")]),t._v('方法的实现是和平台、构建方式相关的。以"entry-runtime-with-compiler.js"为例，关键步骤是查看'),n("code",[t._v("vm.$options")]),t._v("中是否有render方法，如果没有则会根据el和template属性确定最终的template字符串，再调用"),n("code",[t._v("compileToFunctions")]),t._v('方法将template字符串转为render方法，最后，调用原先原型上的$mount方法，即开始执行"lifecycle.js"中'),n("code",[t._v("mountComponent")]),t._v("方法；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'beforeMount')")]),t._v("：调用beforeMount生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("vm._render()")]),t._v(" => "),n("code",[t._v("vm._update()")]),t._v(" => "),n("code",[t._v("vm.__patch__()")]),t._v("：先执行vm._render方法，即调用createElement生成虚拟DOM，即VNode ，每个VNode有children ，children 每个元素也是⼀个 VNode，这样就形成了⼀个 VNode Tree；再调用vm._update方法进行首次渲染，vm._update方法核心是调用vm."),n("strong",[t._v("patch")]),t._v("方法，这个方法跟vm.$mount一样跟平台相关；vm."),n("strong",[t._v("patch")]),t._v("方法则是根据生成的VNode Tree递归createElm方法创建真实Dom Tree挂载到Dom上；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'mount')")]),t._v("：调用mount生命周期钩子函数：VNode patch 到 Dom 之后会执行 'invokeInsertHook'函数，把"),n("code",[t._v("insertedVnodeQueue")]),t._v("中保存的mount钩子函数执行一遍，"),n("strong",[t._v("insertedVnodeQueue队列中的钩子函数是在根据VNode Tree递归createElm方法创建真实Dom Tree过程生成的钩子函数顺序队列，因此mounted钩子函数的执行顺序是先子后父；")])])]),t._v(" "),n("li",[n("p",[n("code",[t._v("data changes")]),t._v("：数据更新，nextTick中执行"),n("code",[t._v("flushSchedulerQueue")]),t._v("方法，该方法会执行watcher队列中的watcher；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'beforeUpdate')")]),t._v("：执行watcher时会执行watcher的before方法，即调用beforeUpdate生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Virtual DOM re-render and patch")]),t._v("：重新render生成新的Virtual DOM，并且patch到DOM上；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'updated')")]),t._v("：调用updated生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("vm.$destroy()")]),t._v("：启动卸销毁过程；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'beforeDestroy')")]),t._v("：调用beforeDestroy生命周期钩子函数；")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("Teardown watchers, childcomponents and event listeners")]),t._v("：执行一系列销毁动作，在 $destroy 的执行过程中，它又会执行"),n("code",[t._v("vm.__patch__(vm._vnode, null)")]),t._v(" 触发它子组件的销毁钩子函数，这样一层层的递归调用，所以 destroyed 钩子函数执行顺序是先子后父，和 mounted 过程一样。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("callHook(vm, 'destroyed ')")]),t._v("：调用destroyed 生命周期钩子函数。")])])]),t._v(" "),n("h4",{attrs:{id:"errorcaptured生命周期钩子函数"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#errorcaptured生命周期钩子函数","aria-hidden":"true"}},[t._v("#")]),t._v(" "),n("code",[t._v("errorCaptured")]),t._v("生命周期钩子函数")]),t._v(" "),n("ul",[n("li",[t._v("当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 false 以阻止该错误继续向上传播。")]),t._v(" "),n("li",[t._v("如果一个组件的继承或父级从属链路中存在多个 errorCaptured 钩子，则它们将会被相同的错误逐个唤起。")]),t._v(" "),n("li",[t._v("默认情况下，如果全局的 config.errorHandler 被定义，所有的错误仍会发送它，因此这些错误仍然会向单一的分析服务的地方进行汇报。")])]),t._v(" "),n("h4",{attrs:{id:"keep-alive组件"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#keep-alive组件","aria-hidden":"true"}},[t._v("#")]),t._v(" keep-alive组件")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("keep-alive组件是vue的**内置抽象（abstract）**组件，抽象组件在initLifecycle过程中 组件实例建立父子关系时会被忽略，因此他自身不会渲染一个DOM元素，也不会出现在父组件链中。")])]),t._v(" "),n("li",[n("p",[t._v("keep-alive作用是用于包裹动态组件，缓存不活动的组件实例。keep-alive自定义实现了render函数并利用了插槽slot，render函数中先获取它的默认插槽，再获取到它的第一个组件子节点，因此keep-alive组件只处理第一个子元素，所以一般和它搭配使用的有component动态组件或者router-view。")])]),t._v(" "),n("li",[n("p",[t._v("keep-alive组件在created钩子中定义了 this.cache 和 this.keys，本质上是去缓存已创建的 "),n("strong",[t._v("vnode")]),t._v("，缓存策略采用"),n("strong",[t._v("LRU策略")]),t._v("，每次缓存命中时将当前vnode移到缓存数组末尾，需要删除时则删除缓存数组第一个vnode。")])]),t._v(" "),n("li",[n("p",[t._v("keep-alive组件接收三个props：")]),t._v(" "),n("ol",[n("li",[n("p",[n("code",[t._v("include")]),t._v("：数组、字符串或者正则表达式，只有匹配的组件才会缓存。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("exclude")]),t._v("：数组、字符串或者正则表达式，任何匹配的组件都不会被缓存。")])]),t._v(" "),n("li",[n("p",[n("code",[t._v("max")]),t._v("：字符串或数字，指定可以缓存的组件最大个数，如果个数超过max，则销毁缓存数组中的第一个组件。")])])])]),t._v(" "),n("li",[n("p",[t._v("keep-alive组件子组件渲染机制：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("首次渲染：和普通组件一样执行正常的init生命周期钩子函数，同时将生成的vnode缓存到内存中；")])]),t._v(" "),n("li",[n("p",[t._v("组件切换：切换到新组件时，旧组件不会销毁，而是变成未激活状态，即不会执行destroy相关的钩子函数，而是执行 "),n("code",[t._v("deactivated")]),t._v(" 生命周期钩子函数，如果新组件不在缓存数组中，则执行首次渲染，否则执行缓存渲染；")])]),t._v(" "),n("li",[n("p",[t._v("缓存渲染：缓存渲染即组件由未激活状态变成激活状态，因此不会执行created、mounted等钩子函数，而是执行 "),n("code",[t._v("activated")]),t._v(" 生命周期钩子函数。")])])])])]),t._v(" "),n("h3",{attrs:{id:"_4-vue和react的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4-vue和react的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 4.Vue和React的区别")]),t._v(" "),n("p",[t._v("相同点：")]),t._v(" "),n("ol",[n("li",[t._v("虚拟 DOM")]),t._v(" "),n("li",[t._v("组件化")]),t._v(" "),n("li",[t._v("保持对视图的关注")]),t._v(" "),n("li",[t._v("数据驱动视图")]),t._v(" "),n("li",[t._v("都有支持 native 的方案")])]),t._v(" "),n("p",[t._v("不同点：")]),t._v(" "),n("ol",[n("li",[t._v("state 状态管理 vs 对象属性 get，set。")]),t._v(" "),n("li",[t._v("vue 实现了数据的双向绑定 v-model，而组件之间的 props 传递是单向的，react 数据流动是单向的。")])]),t._v(" "),n("h4",{attrs:{id:"运行时优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#运行时优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 运行时优化")]),t._v(" "),n("p",[t._v("在 React 应用中，当某个组件的状态发生变化时，它会以该组件为根，重新渲染整个组件子树，开发者不得不手动使用 shouldComponentUpdate 去优化性能。")]),t._v(" "),n("p",[t._v("在 Vue 组件的依赖是在渲染过程中自动追踪的，开发者不再需要考虑此类优化。另外 Vue 还做了很多其他方面的优化，例如：标记静态节点，优化静态循环等。")]),t._v(" "),n("blockquote",[n("p",[t._v("总结：Vue 在运行时帮我们做了很多优化了处理，开发者可以直接上手，React 则是由开发者自己去处理优化，让程序有更多的定制化。")])]),t._v(" "),n("h4",{attrs:{id:"jsx-vs-templates"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jsx-vs-templates","aria-hidden":"true"}},[t._v("#")]),t._v(" JSX vs Templates")]),t._v(" "),n("p",[t._v("JSX 中你可以使用完整的编程语言 JavaScript 功能来构建你的视图页面。比如你可以使用临时变量、JS 自带的流程控制、以及直接引用当前 JS 作用域中的值等等。")]),t._v(" "),n("p",[t._v("Templates 对于很多习惯了 HTML 的开发者来说，模板比起 JSX 读写起来更自然。基于 HTML 的模板使得将已有的应用逐步迁移到 Vue 更为容易。你甚至可以使用其他模板预处理器，比如 Pug 来书写 Vue 的模板。")]),t._v(" "),n("blockquote",[n("p",[t._v("总结：Vue 在模板上实现定制化，可以使用类 HTML 模板，以及可以使用 JSX，React 则是推荐 JSX。")])]),t._v(" "),n("h3",{attrs:{id:"_5-vue项目性能优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5-vue项目性能优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 5.Vue项目性能优化")]),t._v(" "),n("h4",{attrs:{id:"路由懒加载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#路由懒加载","aria-hidden":"true"}},[t._v("#")]),t._v(" 路由懒加载")]),t._v(" "),n("p",[t._v("将异步组件定义为返回一个 Promise 的工厂函数 (该函数返回的 Promise 应该 resolve 组件本身),使用动态 import语法来定义代码分块点 (split point):")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("Foo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'./Foo.vue'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br")])]),n("h4",{attrs:{id:"代码优化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代码优化","aria-hidden":"true"}},[t._v("#")]),t._v(" 代码优化")]),t._v(" "),n("ul",[n("li",[t._v("v-if 和 v-show选择调用")]),t._v(" "),n("li",[t._v("细分vuejs组件，组件按需加载")]),t._v(" "),n("li",[t._v("减少watch的数据")]),t._v(" "),n("li",[t._v("利用"),n("code",[t._v("vue-lazy")]),t._v("实现图片懒加载")]),t._v(" "),n("li",[t._v("SSR")]),t._v(" "),n("li",[t._v("webpack配置：js打包多个文件，压缩图片（"),n("code",[t._v("npm run build --report")]),t._v("查看打包体积问题）")])]),t._v(" "),n("h4",{attrs:{id:"用户体验"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#用户体验","aria-hidden":"true"}},[t._v("#")]),t._v(" 用户体验")]),t._v(" "),n("ul",[n("li",[t._v("loading图")]),t._v(" "),n("li",[t._v("骨架屏")]),t._v(" "),n("li",[t._v("点击延迟")])]),t._v(" "),n("h3",{attrs:{id:"_6-vuex解决了什么问题"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6-vuex解决了什么问题","aria-hidden":"true"}},[t._v("#")]),t._v(" 6.Vuex解决了什么问题")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1.多个组件共享状态时，单向数据流的简洁性很容易被破坏：\n2.多个视图依赖于同一状态。\n3.来自不同视图的行为需要变更同一状态。\nVuex 通过 store 选项，提供了一种机制将状态从根组件“注入”到每一个子组件中（需调用 Vue.use(Vuex)）\n通过在根实例中注册 store 选项，该 store 实例会注入到根组件下的所有子组件中，且子组件能通过 this.$store 访问到state\n主要有这五个模块：\ngetter mutation action state module\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br")])]),n("h3",{attrs:{id:"_7-讲讲vue的diff算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7-讲讲vue的diff算法","aria-hidden":"true"}},[t._v("#")]),t._v(" 7.讲讲Vue的diff算法")]),t._v(" "),n("p",[t._v("虚拟DOM：用JS对象来表示DOM对象")]),t._v(" "),n("div",{staticClass:"language-js line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" Vnode "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'div'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    children"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tag"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'p'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("p",[t._v("diff比较方式：比较新旧节点只会"),n("strong",[t._v("同层级比较")]),t._v("，第一层不一样则不会继续比较（实际上Vue的diff算法是"),n("strong",[t._v("广度优先")]),t._v("）")]),t._v(" "),n("p",[t._v("先patchVnode新旧节点，不是同一个节点则replace，否则判断子节点：")]),t._v(" "),n("ul",[n("li",[t._v("找到对应的真实dom，称为el")]),t._v(" "),n("li",[t._v("判断Vnode和oldVnode是否指向同一个对象，如果是，那么直接return")]),t._v(" "),n("li",[t._v("如果他们都有文本节点并且不相等，那么将el的文本节点设置为Vnode的文本节点。")]),t._v(" "),n("li",[t._v("如果oldVnode有子节点而Vnode没有，则删除el的子节点")]),t._v(" "),n("li",[t._v("如果oldVnode没有子节点而Vnode有，则将Vnode的子节点真实化之后添加到el")]),t._v(" "),n("li",[t._v("如果两者都有子节点，则执行updateChildren函数比较子节点")])]),t._v(" "),n("p",[t._v("updateChild实现过程：")]),t._v(" "),n("ul",[n("li",[t._v("将Vnode的子节点Vch和oldVnode的子节点oldCh提取出来")]),t._v(" "),n("li",[t._v("oldCh和vCh各有两个头尾的变量StartIdx和EndIdx，它们的2个变量相互比较，一共有4种比较方式。如果4种比较都没匹配，如果设置了key，就会用key进行比较，在比较的过程中，变量会往中间靠，一旦StartIdx>EndIdx表明oldCh和vCh至少有一个已经遍历完了，就会结束比较。")])]),t._v(" "),n("h3",{attrs:{id:"_8-mvc和mvvm的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8-mvc和mvvm的区别","aria-hidden":"true"}},[t._v("#")]),t._v(" 8.MVC和MVVM的区别")]),t._v(" "),n("ul",[n("li",[t._v("Model用于封装和应用程序的业务逻辑相关的数据以及对数据的处理方法；")]),t._v(" "),n("li",[t._v("View作为视图层，主要负责数据的展示；")]),t._v(" "),n("li",[t._v("Controller定义用户界面对用户输入的响应方式，它连接模型和视图，用于控制应用程序的流程，处理用户的行为和数据上的改变。")])]),t._v(" "),n("p",[t._v("MVC将响应机制封装在controller对象中，当用户和你的应用产生交互时，控制器中的事件触发器就开始工作了。 MVVM把View和Model的同步逻辑自动化了。以前Controller负责的View和Model同步不再手动地进行更新操作，而是交给框架所提供的数据绑定功能进行负责，只需要告诉它View显示的数据对应的是Model哪一部分即可。也就是双向数据绑定，就是View的变化能实时让Model发生变化，而Model的变化也能实时更新到View。")]),t._v(" "),n("h3",{attrs:{id:"_9-vue组件实现方式汇总"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9-vue组件实现方式汇总","aria-hidden":"true"}},[t._v("#")]),t._v(" 9."),n("a",{attrs:{href:"https://www.mybj123.com/2918.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Vue组件实现方式汇总"),n("OutboundLink")],1)]),t._v(" "),n("ul",[n("li",[n("p",[t._v("v-model语法糖实现同步父子组件")])]),t._v(" "),n("li",[n("p",[t._v("表单验证则是通过获取子组件实例进行封装")])]),t._v(" "),n("li",[n("p",[t._v("全局弹窗组件则是通过手动mounted挂载实现")])]),t._v(" "),n("li",[n("p",[t._v("也可以使用Vue的高阶组件实现throttle或者debounce的封装")])])]),t._v(" "),n("h3",{attrs:{id:"_10-vue的computed和watch有什么区别？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_10-vue的computed和watch有什么区别？","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.Vue的computed和watch有什么区别？")]),t._v(" "),n("ul",[n("li",[t._v("computed特性")])]),t._v(" "),n("p",[t._v("1.是计算值，\n2.应用：就是简化tempalte里面{{}}计算和处理props或$emit的传值\n3.具有缓存性，页面重新渲染值不变化,计算属性会立即返回之前的计算结果，而不必再次执行函数")]),t._v(" "),n("ul",[n("li",[t._v("watch特性")])]),t._v(" "),n("p",[t._v("1.是观察的动作，\n2.应用：监听props，$emit或本组件的值执行异步操作\n3.无缓存性，页面重新渲染时值不变化也会执行")]),t._v(" "),n("p",[n("a",{attrs:{href:"https://segmentfault.com/a/1190000010408657",target:"_blank",rel:"noopener noreferrer"}},[t._v("computed原理"),n("OutboundLink")],1),t._v("：")]),t._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[t._v("1. data 属性初始化 getter setter\n2. computed 计算属性初始化，提供的函数将用作属性 vm.reversedMessage 的 getter\n3. 当首次获取 reversedMessage 计算属性的值时，Dep 开始依赖收集\n4. 在执行 message getter 方法时，如果 Dep 处于依赖收集状态，则判定 message 为 reversedMessage 的依赖，并建立依赖关系\n5. 当 message 发生变化时，根据依赖关系，触发 reverseMessage 的重新计算\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br")])]),n("h3",{attrs:{id:"_11-vue的nexttick实现原理和应用场景？"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_11-vue的nexttick实现原理和应用场景？","aria-hidden":"true"}},[t._v("#")]),t._v(" 11.Vue的nextTick实现原理和应用场景？")]),t._v(" "),n("p",[t._v("Vue 在更新 DOM 时是"),n("strong",[t._v("异步")]),t._v("执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。Vue 在内部对异步队列尝试使用原生的 "),n("code",[t._v("Promise.then")]),t._v("、"),n("code",[t._v("MutationObserver")]),t._v(" 和 "),n("code",[t._v("setImmediate")]),t._v("，如果执行环境不支持，则会采用 "),n("code",[t._v("setTimeout(fn, 0)")]),t._v(" 代替。")]),t._v(" "),n("p",[t._v("例如，当你设置 "),n("code",[t._v("vm.someData = 'new value'")]),t._v("，该组件不会立即重新渲染。当刷新队列时，组件会在下一个事件循环“tick”中更新。多数情况我们不需要关心这个过程，但是如果你想基于更新后的 DOM 状态来做点什么，这就可能会有些棘手。虽然 Vue.js 通常鼓励开发人员使用“数据驱动”的方式思考，避免直接接触 DOM，但是有时我们必须要这么做。为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 "),n("code",[t._v("Vue.nextTick(callback)")]),t._v("。这样回调函数将在 DOM 更新完成后被调用。")]),t._v(" "),n("p",[t._v("在 created 和 mounted 阶段，如果需要操作渲染后的试图，也要使用 nextTick 方法。")]),t._v(" "),n("p",[t._v("官方文档说明：")]),t._v(" "),n("blockquote",[n("p",[t._v("注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 vm.$nextTick 替换掉 mounted")])]),t._v(" "),n("p",[t._v("nextTick将需要延迟的函数放到了一个异步队列中执行,setTimeout或Promise等，来起到延迟执行的作用。")]),t._v(" "),n("p",[t._v("很多用途都是用于将函数放到Dom更新后执行，比如在created生命周期中拿不到dom因为还没渲染挂载到页面，这时就需要将对dom的操作放到nexttick函数中。那么为什么nexttick中的函数能延迟到dom更新完成后呢？")]),t._v(" "),n("p",[t._v("因为采用的是异步回调，所有异步函数都会在同步函数执行完之后在进行调用，而DOM的更新在同一事件循环中是同步的，所以能在其后执行。")])])},[],!1,null,null,null);s.default=e.exports}}]);