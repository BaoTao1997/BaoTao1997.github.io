(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{256:function(t,e,i){"use strict";i.r(e);var a=i(0),v=Object(a.a)({},function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h2",{attrs:{id:"git"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#git","aria-hidden":"true"}},[t._v("#")]),t._v(" Git")]),t._v(" "),i("p",[t._v("我看过很多GIt教程,平时还是自己多使用才容易记住,为了更快地理解这些GIt操作,我打算用QA的形式整理这些操作和作用,还有一个国外的网站教你如何快速地熟悉"),i("a",{attrs:{href:"https://learngitbranching.js.org/?tdsourcetag=s_pcqq_aiomsg",target:"_blank",rel:"noopener noreferrer"}},[t._v("Git操作"),i("OutboundLink")],1)]),t._v(" "),i("h3",{attrs:{id:"基本使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本使用")]),t._v(" "),i("p",[t._v("先来看一个 github 仓库，多人开发的案例。")]),t._v(" "),i("ul",[i("li",[t._v("git clone github/xxx 克隆仓库。")]),t._v(" "),i("li",[t._v("git checkout -b feature/xxx 新建自己的分支。")]),t._v(" "),i("li",[t._v("修改代码。")]),t._v(" "),i("li",[t._v("git add xxx 暂存一段代码。")]),t._v(" "),i("li",[t._v("git commit -m 'feat: xxx' 把暂存区的所有修改提交到分支上。")]),t._v(" "),i("li",[t._v("git push 推送到远程仓库。")]),t._v(" "),i("li",[t._v("在 github 上提交 pull request 。")]),t._v(" "),i("li",[t._v("合并后删除 feature/xxx 分支。")])]),t._v(" "),i("p",[t._v("如果你是个新手，上面的 git 命令已经可以满足日常开发的需要了，但为了深入了解 git，我们接着往下看。")]),t._v(" "),i("h3",{attrs:{id:"基本操作-api"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#基本操作-api","aria-hidden":"true"}},[t._v("#")]),t._v(" 基本操作 API")]),t._v(" "),i("p",[t._v("这些命令在代码回滚，合并产生冲突时，使用率很高。")]),t._v(" "),i("ul",[i("li",[i("p",[t._v("git status 查看状态。")])]),t._v(" "),i("li",[i("p",[t._v("git diff 查看工作区和版本库里面最新版本的区别。")])]),t._v(" "),i("li",[i("p",[t._v("git log 查看提交记录。")])]),t._v(" "),i("li",[i("p",[t._v("git reflog 查看每一次命令记录。")])]),t._v(" "),i("li",[i("p",[t._v("git reset --hard commit_id 切换到指定提交版本。"),i("strong",[t._v("直接通过移动Head指针指向进行回滚(做减法)")])])]),t._v(" "),i("li",[i("p",[t._v("git revert HEAD 发起一个新的 commit，用来撤销最后一次 commit。")]),t._v(" "),i("p",[i("strong",[t._v("通过提交一个新的commit(与之前某个版本内容相同实现回滚,做加法)")])]),t._v(" "),i("ul",[i("li",[t._v("git revert 不能操作文件")])])]),t._v(" "),i("li",[i("p",[t._v("git stash 将当前改动先存起来。git stash pop 释放之前存入的改动。")])])]),t._v(" "),i("h3",{attrs:{id:"分支管理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),i("p",[t._v("规范化的开发需要严格按照分支规范来进行，我们一般这样管理分支。")]),t._v(" "),i("ul",[i("li",[t._v("master 线上代码分支。")]),t._v(" "),i("li",[t._v("develop 主开发分支。\n"),i("ul",[i("li",[t._v("当无项目开发时，和 master 分支保持一致。")]),t._v(" "),i("li",[t._v("当有项目开发时，会包含正在开发的项目代码。")])])]),t._v(" "),i("li",[t._v("feature/xxx 个人开发分支。\n"),i("ul",[i("li",[t._v("从 develop 分支上拉取代码，进行功能开发。")]),t._v(" "),i("li",[t._v("开发完成后，合并到 develop 分支。")])])]),t._v(" "),i("li",[t._v("release 预发布分支。\n"),i("ul",[i("li",[t._v("从 develop 分支上拉取代码，交给测试去测。")]),t._v(" "),i("li",[t._v("测试发现比较大的 bug，在 feature 分支上修改后，合到 develop 分支上，在重新拉取。")]),t._v(" "),i("li",[t._v("测试发现的小 bug，直接在 release 分支上修改。")]),t._v(" "),i("li",[t._v("合并到 master 和 develop 分支上。")])])]),t._v(" "),i("li",[t._v("hotfix 线上紧急修复分支。\n"),i("ul",[i("li",[t._v("从 master 分支拉取，修改代码")]),t._v(" "),i("li",[t._v("测试完毕后，直接合回 master 和 develop 分支。")])])])]),t._v(" "),i("h4",{attrs:{id:"分支相关的-api"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#分支相关的-api","aria-hidden":"true"}},[t._v("#")]),t._v(" 分支相关的 API")]),t._v(" "),i("ul",[i("li",[t._v("查看分支：git branch")]),t._v(" "),i("li",[t._v("创建分支：git branch [name]")]),t._v(" "),i("li",[t._v("切换分支：git checkout [name]")]),t._v(" "),i("li",[t._v("创建 + 切换分支：git checkout -b [name]")]),t._v(" "),i("li",[t._v("合并某分支到当前分支：git merge [name]")]),t._v(" "),i("li",[t._v("删除分支：git branch -d [name]")]),t._v(" "),i("li",[t._v("建立本地分支和远程分支的关联：git branch --set-upstream branch-name origin/branch-name")])]),t._v(" "),i("h3",{attrs:{id:"q-本地分支和远程分支没有关联导致提交失败-怎么处理"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#q-本地分支和远程分支没有关联导致提交失败-怎么处理","aria-hidden":"true"}},[t._v("#")]),t._v(" Q:本地分支和远程分支没有关联导致提交失败,怎么处理?")]),t._v(" "),i("p",[t._v("A:我们可以使用"),i("code",[t._v("git push origin 分支名")]),t._v("强制推送至远程,Git很人性化的给出了"),i("code",[t._v("git push --set-upstream origin 分支名")]),t._v("这个命令提示,我们只要输入该命令之后,每次只需要"),i("code",[t._v("git push")]),t._v("即可,不需要强制推送了")]),t._v(" "),i("h3",{attrs:{id:"q-当有紧急任务需要切换分支时-而目前开发的分支只完成了一半-又不想提交无效commit-该怎么做"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#q-当有紧急任务需要切换分支时-而目前开发的分支只完成了一半-又不想提交无效commit-该怎么做","aria-hidden":"true"}},[t._v("#")]),t._v(" Q:当有紧急任务需要切换分支时,而目前开发的分支只完成了一半,又不想提交无效commit,该怎么做?")]),t._v(" "),i("p",[t._v("A:通过"),i("code",[t._v("git statsh")]),t._v("把未提交的修改(包括暂存的和非暂存的)暂存起来,注意是"),i("strong",[t._v("暂存至本地")]),t._v(",然后切换分支解决对应问题后,我们回到原来的分支,使用"),i("code",[t._v("git statsh pop")]),t._v("可以取出刚刚修改内容,"),i("code",[t._v("git statsh apply")]),t._v("也是同样的效果,不过该命令不会把修改内容在Git缓存堆栈中清除,可以应用至多个工作目录")]),t._v(" "),i("h3",{attrs:{id:"q-提交了很多commit到远程分支-但每个commit只有少量的改动-所以想将这些commit进行合并怎么操作"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#q-提交了很多commit到远程分支-但每个commit只有少量的改动-所以想将这些commit进行合并怎么操作","aria-hidden":"true"}},[t._v("#")]),t._v(" Q:提交了很多commit到远程分支,但每个commit只有少量的改动,所以想将这些commit进行合并怎么操作?")]),t._v(" "),i("p",[t._v("A:假设我们合并前三个commit,首先用"),i("code",[t._v("git log")]),t._v("查看最近的提交,然后执行"),i("code",[t._v("git rebase -i 第四个commit的版本号")]),t._v("然后会跳出弹框,将"),i("strong",[t._v("将除了第一个的pick，其他都改为 s 或 squash(p表示保留该commit,s表示与前一个commit合并)")]),t._v(",修改后保存退出,再次输入"),i("code",[t._v("git log")]),t._v("会发现提交已经合并,然后执行"),i("code",[t._v("git push -f")]),t._v("将分支强制提交到远程")]),t._v(" "),i("h3",{attrs:{id:"q-执行了强制回滚git-reset-hard导致前面的修改都丢失了-并提交了新的commit-怎么把之前的修改恢复-并保留新的commit"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#q-执行了强制回滚git-reset-hard导致前面的修改都丢失了-并提交了新的commit-怎么把之前的修改恢复-并保留新的commit","aria-hidden":"true"}},[t._v("#")]),t._v(" Q:执行了强制回滚Git reset --hard导致前面的修改都丢失了,并提交了新的commit,怎么把之前的修改恢复,并保留新的commit?")]),t._v(" "),i("p",[t._v("A:执行"),i("code",[t._v("git reflog")]),t._v("可以查看之前所有的git操作,找到前面修改的hash码,然后用"),i("code",[t._v("git reset --hard hash码")]),t._v("执行回滚,最新的commit的hash码也能够观察到,用"),i("code",[t._v("git cherry-pick hash码")]),t._v("将新的commit内容合并进来,然后解决冲突即可")]),t._v(" "),i("h3",{attrs:{id:"q-介绍下git-rebase？"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#q-介绍下git-rebase？","aria-hidden":"true"}},[t._v("#")]),t._v(" Q:介绍下Git rebase？")]),t._v(" "),i("p",[t._v("有test和dev两个分支，分别有两个commit，此时执行下列命令：")]),t._v(" "),i("div",{staticClass:"language- line-numbers-mode"},[i("pre",{pre:!0,attrs:{class:"language-text"}},[i("code",[t._v("git checkout test\ngit rebase dev\n")])]),t._v(" "),i("div",{staticClass:"line-numbers-wrapper"},[i("span",{staticClass:"line-number"},[t._v("1")]),i("br"),i("span",{staticClass:"line-number"},[t._v("2")]),i("br")])]),i("p",[t._v("以dev为基准将test的提交进行回放，挨个的应用到dev上去，然后test的那些提交就会废弃。 等价于git merge dev。")]),t._v(" "),i("p",[i("strong",[t._v("git merge 和git rebase区别：")])]),t._v(" "),i("ul",[i("li",[t._v("merge不会修改提交历史，rebase会修改提交历史 。")]),t._v(" "),i("li",[t._v("rebase只应用于本地没有提交的代码，如果应用到已经提交到远程的分支不要应用，不然会非常的麻烦，git merge 可以应用于远程分支。")])]),t._v(" "),i("h3",{attrs:{id:"浏览器的performance使用"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#浏览器的performance使用","aria-hidden":"true"}},[t._v("#")]),t._v(" 浏览器的performance使用")]),t._v(" "),i("p",[t._v("参考："),i("a",{attrs:{href:"https://juejin.im/post/5c009115f265da612859d8e2#heading-15",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器performance使用"),i("OutboundLink")],1)])])},[],!1,null,null,null);e.default=v.exports}}]);